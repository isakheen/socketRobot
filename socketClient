import socket
from random import random
from guizero import App, TextBox, PushButton
import tkinter as tk
from time import sleep
import clientGUI

"""
cube_width = 50
cube_height = 50
buffer = 10
lista = ["red", "red", "red", "green", "blue", "yellow"]


def change_value(value, value_sub):
    new_value = value - value_sub
    return new_value


red_coord = "(1, 2)"
green_coord = "(3, 4)"
blue_coord = "(5, 6)"
yellow_coord = "(7, 8)"


def starta_inlev():
    print("working")
"""


def client_program():
    # master = tk.Tk()
    host = "127.0.0.1"  # as both code is running on same pc
    port = 5000  # socket server port number

    client_socket = socket.socket()  # instantiate
    client_socket.connect((host, port))  # connect to the server

    def stop_button_action():
        color_reset()
        stop_button.text_color = "blue"
        client_socket.send("func_plocka_kub(3, 4)".encode())

    def starta_inlev_button_action():
        color_reset()
        starta_inlev_button.text_color = "blue"
        client_socket.send("Starta inlev".encode())

    def stoppa_inlev_button_action():
        color_reset()
        stoppa_inlev_button.text_color = "blue"
        client_socket.send("Stoppa inlev".encode())

    def utlev_button_action():
        color_reset()
        utlev_button.text_color = "blue"
        client_socket.send("Starta utlev".encode())

    def välj_fil_button_action():
        color_reset()
        välj_fil_button.text_color = "blue"
        client_socket.send("Välj fil".encode())

    def color_reset():
        app.text_color = "black"

    def status_packning():
        packning = random()
        if packning > 0.5:
            return "PÅGÅR"
        else:
            return "PÅGÅR EJ"

    app = App(title="Packningsrobot", layout="grid", width=500, height=350)
    stop_button = PushButton(app, width=10, height=4, text="STOPP", grid=[0, 0], command=stop_button_action)
    starta_inlev_button = PushButton(app, text="STARTA INLEVERANS", grid=[0, 1], command=starta_inlev_button_action)
    stoppa_inlev_button = PushButton(app, text="STOPPA INLEVERANS", grid=[1, 1], command=stoppa_inlev_button_action)
    utlev_button = PushButton(app, text="UTLEVERANS", grid=[0, 2], command=utlev_button_action)
    välj_fil_button = PushButton(app, text="VÄLJ FIL", grid=[1, 2], command=välj_fil_button_action)
    TextBox(app, width=30, height=7, multiline=True, text="PACKNING\n" + "          " + status_packning(), grid=[2, 0])
    TextBox(app, width=40, height=3, multiline=True, text="Status,\nkommande\nkuber, whatever-", grid=[2, 2])

    app.display()


"""
    def click(event):
        frame.focus_set()
        key2 = event.x, event.y
        print(key2)

    def char(event):
        key1 = repr(event.char)
        real_g = eval(key1)

        if real_g == "a":
            nr_red = 5
            nr_green = 8
            nr_blue = 3
            nr_yellow = 4
            for i in lista:
                if i.__contains__("red"):
                    row = 1
                    x_coord = nr_red * (cube_width + buffer)
                    y_coord = (row - 1) * cube_height + row * buffer + cube_height / 2
                    nr_red -= 1
                elif i.__contains__("blue"):
                    row = 2
                    x_coord = nr_blue * (cube_width + buffer)
                    y_coord = (row - 1) * cube_height + row * buffer + cube_height / 2
                    nr_blue -= 1
                elif i.__contains__("green"):
                    row = 3
                    x_coord = nr_green * (cube_width + buffer)
                    y_coord = (row - 1) * cube_height + row * buffer + cube_height / 2
                    nr_green -= 1
                else:
                    row = 4
                    x_coord = nr_yellow * (cube_width + buffer)
                    y_coord = (row - 1) * cube_height + row * buffer + cube_height / 2
                    nr_yellow -= 1
                coord = "(" + str(x_coord) + "," + str(int(y_coord)) + ")"

                value = "func_plocka_kub" + coord + "\n"
                client_socket.send(value.encode())
                print(nr_red)
                sleep(2)

    frame = tk.Frame(master, height=500, width=500)
    frame.bind("<Button-1>", click)
    frame.bind("<Key>", char)
    frame.pack()

    master.mainloop()
"""

# data = client_socket.recv(1024).decode()  # receive response

# print('Received from server: ' + data)  # show in terminal

# client_socket.close()  # close the connection


if __name__ == '__main__':
    client_program()
